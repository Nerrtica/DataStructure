#include<stdio.h>
#define max 100;

int Graph[8][8] ={
	{100,2,8,100,100,100,100,100},
	{2,100,7,9,100,100,100,100},
	{8,7,100,4,10,12,100,100},
	{100,9,4,100,100,100,100,100},
	{100,100,10,100,100,6,14,100},
	{100,100,12,100,6,100,100,100},
	{100,100,100,100,14,100,100,3},
	{100,100,100,100,100,100,3,100}
};

int Graph2[8][8] ={
	{100,2,8,100,100,100,100,100},
	{2,100,7,9,100,100,100,100},
	{8,7,100,4,10,12,100,100},
	{100,9,4,100,100,100,100,100},
	{100,100,10,100,100,6,14,100},
	{100,100,12,100,6,100,100,100},
	{100,100,100,100,14,100,100,3},
	{100,100,100,100,100,100,3,100}
};

int SpanningTree[8][8] = {
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0}
};

int visited[8] = {0,0,0,0,0,0,0,0};

int top=0;
int stack[11];

int isEmpty(int *stack1){
	int i;
	if(top==0){
			return 1;
		}
		else{
			return 0;
		}
}

int isFull(int *stack1){
	int i;

	if(top==10){
	}
	else{
		return 0;
	}
}

void push(int data){
		stack[top]=data;
		top++;
	}

int pop(){
	int tmp;
	if(isEmpty(stack)==1){
		printf("cannot pop,\n");
	}
	else{
		top--;
		tmp=stack[top];
		stack[top]=NULL;
		return tmp;
		
	}
}


int visted[11]={0,0,0,0,0,0,0,0,0,0,0};

int searchGraph(int j){
	int i, x, arrive=0;
	for(i=0;i<8;i++){
		if(Graph2[j][i] !=100 && Graph2[i][j] !=100){
			Graph2[j][i] = 100;
			Graph2[i][j] = 100;
			visted[i] = 1;
			push(i+1);
			for(x=0;x<8;x++){
				if(stack[x] != 0){
					printf("%d",stack[x]);
				}
			}
			printf("\n");
			searchGraph(i);
			searchGraph(pop()-1);

			return i;
			break;
		}
	}
}


int Link[8][8] = {
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0}
};

int findMin(int min){
	int i, i2=0,j2=0,j, tmp;
	min = max;
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
			if(min > Graph[i][j]){
				min = Graph[i][j];
				i2 = i;
				j2 = j;
				break;
			}
		}
	}
	SpanningTree[i2][j2] = Graph[i2][j2];
	SpanningTree[j2][i2] = Graph[j2][i2];
	return min;
}

void findMin2(int used){
	int i,i2=0,j2=0, j;
	int x,y;
	int min = max;
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
			if(min > Graph[i][j] &&  Graph[i][j] > used){
				min = Graph[i][j];
				i2= i;
				j2 = j;
				break;
			}
		}
	}

	if(i2 != 0 && j2 !=0 && i2 == 3 && j2 ==5){
		SpanningTree[i2][j2] = 0;
		SpanningTree[j2][i2] = 0;
	}
	if(i2 != 0 && j2 !=0 && i2 != 1 && j2 !=2){
			SpanningTree[i2][j2] = Graph[i2][j2];
			SpanningTree[j2][i2] = Graph[j2][i2];
	}
	else if(i2 != 0 && j2 !=0 && i2 == 1 && j2 ==2){
		SpanningTree[i2][j2] = Graph[i2][j2];
		SpanningTree[j2][i2] = Graph[j2][i2];
	}
	if(min != 100){
		findMin2(min);
	}
}

int main(void){
	int i,j,tmp = 0,num,min;
	min = Graph[0][0];
	findMin2(findMin(min));
	for(i=0;i<8;i++){
		for(j=0;j<8;j++){
			printf("%d",SpanningTree[i][j]);
		}
		printf("\n");
	}
	return 0;
}
